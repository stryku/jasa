#+TITLE: JASA - Just Another Slack API
#+AUTHOR: dptd

* Installation
=git clone https://github.com/dptd/jasa=

=(ql:quickload :jasa)=

* Usage
First of all you need to set your Slack API token.

=(setf jasa:*token* "YourToken")=

This token will be automatically used in all methods which requires authentication.

JASA follows official [[https://api.slack.com/methods/][Slack Web API]] methods convention. You should be able to specify all the arguments described in the Slack API for method which is implemented. For example for [[https://api.slack.com/methods/chat.postMessage][chat.postMessage]] there are plenty of different methods available. You can set them using Common Lisp keywords. See few examples below:
#+BEGIN_SRC lisp
(jasa.chat:post-message :channel "C01234567"
                        :text "test message")

(jasa.chat:post-message :channel "C01234567"
                        :text "test message"
                        :icon_emoji ":robot_face:")
#+END_SRC

You can also use [[https://api.slack.com/docs/message-attachments][message attachments]] by calling =(prepare-attachments)= function.

#+BEGIN_SRC lisp
(jasa.chat:post-message :channel "C01234567"
                        :attachments (jasa.chat:prepare-attachments :pretext "Structured Message"
                                                                    :text "Hello there!"
                                                                    :color "#36a64f"))
#+END_SRC

You can also provide json yourself.

#+BEGIN_SRC lisp
(jasa.chat:post-message :channel "C01234567"
                        :attachments "[{\"pretext\":\"Structured Message\",\"text\":\"Hello there!\",\"color\":\"#36a64f\"}]")
#+END_SRC

* API
** jasa
=(jasa:*token*)=
** jasa.core
=(jasa:send)=

=(jasa:send-and-get-answer)=
** jasa.api
=(jasa.api:test)=
** jasa.auth
=(jasa.auth:test)=

=(jasa.auth:revoke=
** jasa.chat
=(jasa.chat:post-message)=

=(jasa.chat:prepare-attachments)=
